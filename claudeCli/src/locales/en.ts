import type { Translations } from "@/lib/i18n";

export const en: Translations = {
  common: {
    save: "Save",
    cancel: "Cancel",
    delete: "Delete",
    edit: "Edit",
    add: "Add",
    remove: "Remove",
    back: "Back",
    next: "Next",
    previous: "Previous",
    loading: "Loading",
    error: "Error",
    success: "Success",
    warning: "Warning",
    info: "Info",
    confirm: "Confirm",
    yes: "Yes",
    no: "No",
    ok: "OK",
    close: "Close",
    open: "Open",
    settings: "Settings",
    search: "Search",
    filter: "Filter",
    sort: "Sort",
    refresh: "Refresh",
    copy: "Copy",
    select: "Select",
    clear: "Clear",
    reset: "Reset",
    apply: "Apply",
    submit: "Submit",
    create: "Create",
    update: "Update",
    upload: "Upload",
    download: "Download",
    import: "Import",
    export: "Export",
    help: "Help",
    about: "About",
    version: "Version",
    language: "Language",
    email: "Email",
    password: "Password",
    username: "Username",
    name: "Name",
    date: "Date",
    time: "Time",
    dateTime: "Date & Time",
    today: "Today",
    projectPath: "Project Path",
  },

  app: {
    title: "Claudia",
    welcomeTitle: "Welcome to Claudia",
    welcomeSubtitle: "Your AI-powered development assistant",
    ccAgents: "CC Agents",
    fullscreen: "Fullscreen",
    close: "Close",
    ccProjects: "CC Projects",
    backToHome: "Back to Home",
    newSession: "New Session",
    usageDashboard: "Usage Dashboard",
    mcp: "MCP",
    claudeMd: "CLAUDE.md",
  },

  // CLAUDE.md Editor
  claudemd: {
    title: "CLAUDE.md",
    subtitle: "Edit your Claude Code system prompt",
    editSystemPrompt: "Edit your Claude Code system prompt",
    editProjectPrompt: "Edit project-specific Claude Code system prompt",
    failedToLoad: "Failed to load CLAUDE.md file",
    failedToSave: "Failed to save CLAUDE.md file",
    savedSuccessfully: "CLAUDE.md saved successfully",
    unsavedChanges: "You have unsaved changes. Are you sure you want to leave?",
    memories: "CLAUDE.md Memories",
    noFilesFound: "No CLAUDE.md files found in this project",
    loadingFiles: "Loading files...",
    failedToLoadFiles: "Failed to load CLAUDE.md files",
  },

  projects: {
    title: "CC Projects",
    subtitle: "Browse your Claude Code sessions",
    noProjects: "No projects found in ~/.claude/projects",
    projectName: "Project Name",
    projectPath: "Project Path",
    createdAt: "Created At",
    sessions: "Sessions",
    newClaudeCodeSession: "New Claude Code session",
    runningClaudeSessions: "Running Claude Sessions",
    hooks: "Hooks",
    projectSettings: "Project Settings",
  },

  sessions: {
    title: "Sessions",
    noSessions: "No sessions found",
    sessionName: "Session Name",
    deleteSession: "Delete Session",
    deleteSessionConfirm: "Confirm Deletion",
    deleteSessionDesc: "Are you sure you want to delete session \"{sessionId}\"? This action cannot be undone.",
    deletingSession: "Deleting...",
    sessionDeleted: "Session deleted",
    failedToDeleteSession: "Failed to delete session",
    lastModified: "Last Modified",
    messages: "Messages",
    tokens: "Tokens",
    cost: "Cost",
    status: "Status",
    active: "Active",
    completed: "Completed",
    failed: "Failed",
    cancelled: "Cancelled",
    claudeCodeSession: "Claude Code Session",
    commands: "Commands",
    copyOutput: "Copy Output",
    slashCommands: "Slash Commands",
    manageProjectSpecificSlashCommands: "Manage project-specific slash commands for",
    checkpointSettings: "Checkpoint Settings",
    close: "Close",
    experimentalFeature: "Experimental Feature",
    checkpointingWarning:
      "Checkpointing may affect directory structure or cause data loss. Use with caution.",
    automaticCheckpoints: "Automatic Checkpoints",
    automaticCheckpointsDesc: "Automatically create checkpoints based on the selected strategy",
    checkpointStrategy: "Checkpoint Strategy",
    smartRecommended: "Smart (Recommended)",
    smartStrategyDesc: "Checkpoints will be created after destructive operations",
    saveSettings: "Save Settings",
    storageManagement: "Storage Management",
    totalCheckpoints: "Total checkpoints",
    keepRecentCheckpoints: "Keep Recent Checkpoints",
    cleanUp: "Clean Up",
    removeOldCheckpoints: "Remove old checkpoints, keeping only the most recent",
    sessionTimeline: "Session Timeline",
    timeline: "Timeline",
    noCheckpointsYet: "No checkpoints yet",
    loadingTimeline: "Loading timeline...",
    copyAsMarkdown: "Copy as Markdown",
    copyAsJsonl: "Copy as JSONL",
    checkpointSettingsTooltip: "Checkpoint Settings",
    timelineNavigatorTooltip: "Timeline Navigator",
  },

  settings: {
    title: "Settings",
    subtitle: "Configure Claude Code preferences",
    saveSettings: "Save Settings",
    saving: "Saving...",
    settingsSaved: "Settings saved successfully!",
    failedToSave: "Failed to save settings",

    general: "General",
    permissions: "Permissions",
    environment: "Environment",
    advanced: "Advanced",
    hooks: "Hooks",
    commands: "Commands",
    storage: "Storage",

    generalSettings: "General Settings",
    includeCoAuthoredBy: 'Include "Co-authored by Claude"',
    includeCoAuthoredByDesc: "Add Claude attribution to git commits and pull requests",
    verboseOutput: "Verbose Output",
    verboseOutputDesc: "Show full bash and command outputs",
    messageDisplayMode: "Message Display Mode",
    messageDisplayModeDesc: "Choose how to display conversation completion messages",
    showToolCallsOnly: "Concise Mode",
    showBoth: "Full Mode",
    showToolCallsOnlyDesc: "Show only one execution completion message, avoid duplicates",
    showBothDesc: "Show complete conversation response and execution status (may have duplicates)",
    chatRetention: "Chat Transcript Retention (days)",
    chatRetentionDesc: "How long to retain chat transcripts locally (default: 30 days)",
    claudeInstallation: "Claude Code Installation",
    claudeInstallationDesc:
      "Select which Claude Code installation to use. Bundled version is recommended for best compatibility.",
    choosePreferredInstallation:
      "Choose your preferred Claude Code installation. Bundled version is recommended for best compatibility.",
    availableInstallations: "Available Installations",
    selectedInstallation: "Selected Installation",
    bundled: "Bundled",
    system: "System",
    custom: "Custom",
    path: "Path",
    source: "Source",
    version: "Version",
    claudeCodeBundled: "Claude Code (Bundled)",
    loadingInstallations: "Loading available installations...",
    selectClaudeInstallation: "Select Claude installation",
    pleaseSelectInstallation: "Please select a Claude installation",
    multipleInstallationsFound:
      "Multiple Claude Code installations were found on your system. Please select which one you'd like to use.",
    claudeNotFoundInLocations:
      "Claude Code was not found in any of the common installation locations. Please install Claude Code to continue.",
    searchingForInstallations: "Searching for Claude installations...",
    installationGuide: "Installation Guide",
    saveSelection: "Save Selection",
    noInstallationsFound: "No Installations Found",
    validating: "Validating...",
    binaryPathChanged: "⚠️ Claude binary path has been changed. Remember to save your settings.",

    permissionRules: "Permission Rules",
    permissionRulesDesc: "Control which tools Claude Code can use without manual approval",
    allowRules: "Allow Rules",
    denyRules: "Deny Rules",
    addRule: "Add Rule",
    noAllowRules: "No allow rules configured. Claude will ask for approval for all tools.",
    noDenyRules: "No deny rules configured.",
    permissionExamples: "Examples:",

    environmentVariables: "Environment Variables",
    environmentVariablesDesc: "Environment variables applied to every Claude Code session",
    addVariable: "Add Variable",
    noEnvironmentVariables: "No environment variables configured.",
    commonVariables: "Common variables:",

    advancedSettings: "Advanced Settings",
    advancedSettingsDesc: "Additional configuration options for advanced users",
    apiKeyHelper: "API Key Helper Script",
    apiKeyHelperDesc: "Custom script to generate auth values for API requests",
    rawSettings: "Raw Settings (JSON)",
    rawSettingsDesc: "This shows the raw JSON that will be saved to ~/.claude/settings.json",

    // Audio notification settings
    audioNotifications: "Audio Notifications",
    audioNotificationsDesc: "Configure audio alerts for task completion",
    audioNotificationMode: "Notification Mode",
    audioNotificationModeDesc: "Choose when to play audio notifications",
    audioModeOff: "Off",
    audioModeOnMessage: "On Message Complete",
    audioModeOnQueue: "On Queue Complete",
    audioModeOffDesc: "No audio notifications",
    audioModeOnMessageDesc: "Play sound when each message task completes",
    audioModeOnQueueDesc: "Play sound when all queued tasks complete",
    testAudio: "Test Audio",
    testAudioDesc: "Test audio notification playback",
    playTestSound: "Play Test Sound",

    userHooks: "User Hooks",
    userHooksDesc:
      "Configure hooks that apply to all Claude Code sessions for your user account. These are stored in ~/.claude/settings.json",

    // Permission examples
    allowAllBashCommands: "Allow all bash commands",
    allowExactCommand: "Allow exact command",
    allowCommandsWithPrefix: "Allow commands with prefix",
    allowReadingSpecificFile: "Allow reading specific file",
    allowEditingFilesInDocsDirectory: "Allow editing files in docs directory",

    // Environment variable examples
    enableDisableTelemetry: "Enable/disable telemetry (0 or 1)",
    customModelName: "Custom model name",
    disableCostWarnings: "Disable cost warnings (1)",

    // Theme settings
    theme: "Theme",
    themeDesc: "Choose your preferred color theme for the interface",
    selectTheme: "Select a theme",
    themeDark: "Dark",
    themeGray: "Gray", 
    themeLight: "Light",
    themeCustom: "Custom",
    customThemeColors: "Custom Theme Colors",
    colorBackground: "Background",
    colorForeground: "Foreground",
    colorCard: "Card",
    colorCardForeground: "Card Foreground",
    colorPrimary: "Primary",
    colorPrimaryForeground: "Primary Foreground",
    colorSecondary: "Secondary",
    colorSecondaryForeground: "Secondary Foreground",
    colorMuted: "Muted",
    colorMutedForeground: "Muted Foreground",
    colorAccent: "Accent",
    colorAccentForeground: "Accent Foreground",
    colorDestructive: "Destructive",
    colorDestructiveForeground: "Destructive Foreground",
    colorBorder: "Border",
    colorInput: "Input",
    colorRing: "Ring",

    // Font scaling settings
    fontScale: "Font Size",
    fontScaleDesc: "Adjust interface font size for high-resolution displays or improved readability",
    fontScaleSmall: "Small",
    fontScaleNormal: "Normal",
    fontScaleLarge: "Large",
    fontScaleExtraLarge: "Extra Large",
    fontScaleCustom: "Custom",
    fontScaleSmallDesc: "Smaller fonts for high-density displays",
    fontScaleNormalDesc: "Standard font size",
    fontScaleLargeDesc: "Larger fonts for improved readability",
    fontScaleExtraLargeDesc: "Maximum font size for high-resolution screens",
    fontScaleCustomDesc: "Custom scaling multiplier",
    customMultiplier: "Custom Multiplier",
    customMultiplierDesc: "Enter a custom font scaling multiplier (0.5x - 3.0x)",
    customMultiplierPlaceholder: "e.g., 1.5",
    customMultiplierRange: "Range: 0.5x to 3.0x",

    // Other missing keys
    examples: "Examples:",
    failedToLoadSettings: "Failed to load settings. Please ensure ~/.claude directory exists.",
    settingsSavedSuccessfully: "Settings saved successfully!",
    failedToSaveSettings: "Failed to save settings",
    refresh: "Refresh",
    
    // Environment variables grouping related translations
    addGroup: "Add Group",
    noVariablesInGroup: "No variables in this group",
    ungroupedVariables: "Ungrouped Variables",
    duplicateKeyInUngroupedVariables: "Duplicate key in ungrouped variables",
    cssColorValuesDesc: "Use CSS color values (hex, rgb, oklch, etc.). Changes apply immediately.",
  },

  claude: {
    claudeNotFound: "Claude Code not found",
    claudeNotFoundDesc: "Claude Code installation was not found on your system",
    selectClaudeInstallation: "Select Claude Installation",
    installClaude: "Install Claude Code",
    checking: "Checking...",
    claudeCode: "Claude Code",
    claudeVersion: "Claude Code v{version}",
    claudeStreaming: "Claude is streaming",
    claudeStreamingWarning:
      "Claude is still responding. If you navigate away, Claude will continue running in the background.\n\nYou can return to this session from the Projects view.\n\nDo you want to continue?",
    continueNavigation: "Continue Navigation",
  },

  messages: {
    failedToLoadProjects: "Failed to load projects. Please ensure ~/.claude directory exists.",
    failedToLoadSessions: "Failed to load sessions for this project.",
    ensureClaudeDirectory: "Please ensure ~/.claude directory exists.",
    projectLoadError: "Failed to load project",
    sessionLoadError: "Failed to load session",
    saveSuccess: "Saved successfully",
    saveError: "Failed to save",
    deleteSuccess: "Deleted successfully",
    deleteError: "Failed to delete",
    copySuccess: "Copied to clipboard",
    copyError: "Failed to copy",
    uploadSuccess: "Uploaded successfully",
    uploadError: "Failed to upload",
    downloadSuccess: "Downloaded successfully",
    downloadError: "Failed to download",
    networkError: "Network error",
    serverError: "Server error",
    validationError: "Validation error",
    permissionError: "Permission denied",
    notFoundError: "Not found",
    timeoutError: "Request timeout",
    unknownError: "Unknown error",
  },

  validation: {
    required: "This field is required",
  },

  time: {
    justNow: "Just now",
    minutesAgo: "{count} minutes ago",
    hoursAgo: "{count} hours ago",
    daysAgo: "{count} days ago",
    yesterday: "Yesterday",
  },

  mcp: {
    title: "MCP Manager",
    subtitle: "Manage Model Context Protocol servers",
    servers: "Servers",
    addServer: "Add Server",
    serverName: "Server Name",
    serverCommand: "Command",
    serverArgs: "Arguments",
    serverEnv: "Environment",
    enabled: "Enabled",
    disabled: "Disabled",
    autoApprove: "Auto Approve",
    importExport: "Import/Export",
    importConfig: "Import Config",
    exportConfig: "Export Config",
    noServers: "No MCP servers configured",
    serverStatus: "Server Status",
    connected: "Connected",
    disconnected: "Disconnected",
    connecting: "Connecting",
    error: "Error",
    // Additional MCP translations
    mcpServers: "MCP Servers",
    manageServers: "Manage Servers",
    serverConfiguration: "Server Configuration",
    addNewServer: "Add New Server",
    editServer: "Edit Server",
    removeServer: "Remove Server",
    serverDetails: "Server Details",
    connectionStatus: "Connection Status",
    serverLogs: "Server Logs",
    testConnection: "Test Connection",
    reconnect: "Reconnect",
    disconnect: "Disconnect",
    serverPort: "Server Port",
    serverHost: "Server Host",
    authToken: "Auth Token",
    timeout: "Timeout",
    retryAttempts: "Retry Attempts",
    enableLogging: "Enable Logging",
    logLevel: "Log Level",
    serverType: "Server Type",
    protocol: "Protocol",
    version: "Version",
    capabilities: "Capabilities",
    tools: "Tools",
    resources: "Resources",
    prompts: "Prompts",
    sampling: "Sampling",
    roots: "Roots",
    experimental: "Experimental",
    serverInfo: "Server Info",
    lastSeen: "Last Seen",
    uptime: "Uptime",
    requestCount: "Request Count",
    errorCount: "Error Count",
    averageResponseTime: "Average Response Time",
    // 添加缺失的MCP翻译键
    serverNameRequired: "Server name is required",
    commandRequired: "Command is required",
    urlRequired: "URL is required",
    uniqueServerName: "Unique name to identify this server",
    command: "Command",
    commandToExecute: "Command to execute the server",
    commandArguments: "Command Arguments (Optional)",
    spaceSeparatedArgs: "Space-separated command arguments",
    scope: "Scope",
    localProjectOnly: "Local (This project only)",
    projectSharedMcp: "Project (Shared via .mcp.json)",
    userAllProjects: "User (All projects)",
    environmentVariables: "Environment Variables",
    addVariable: "Add Variable",
    addStdioServer: "Add Stdio Server",
    addSseServer: "Add SSE Server",
    addingServer: "Adding server...",
    stdio: "Stdio",
    sse: "SSE",
    url: "URL",
    sseEndpointUrl: "SSE endpoint URL",
    exampleCommands: "Example Commands",
    addMcpServer: "Add MCP Server",
    configureMcpServer: "Configure a new Model Context Protocol server",
    // MCPServerList相关
    configuredServers: "Configured Servers",
    serversConfigured: "{count} servers configured",
    refresh: "Refresh",
    noMcpServersConfigured: "No MCP servers configured",
    addServerToGetStarted: "Add a server to get started with Model Context Protocol",
    running: "Running",
    showFull: "Show Full",
    hide: "Hide",
    environmentVariablesCount: "Environment Variables: {count}",
    arguments: "Arguments",
    copy: "Copy",
    copied: "Copied!",
    localProjectSpecific: "Local (Project-specific)",
    projectSharedViaMcp: "Project (Shared via .mcp.json)",
    userAllProjectsScope: "User (All projects)",
    // MCPImportExport相关
    importExportTitle: "Import & Export",
    importExportSubtitle: "Import MCP servers from other sources or export your configuration",
    importScope: "Import Scope",
    chooseImportScope: "Choose where to save servers imported from JSON files",
    importFromClaudeDesktop: "Import from Claude Desktop",
    importFromClaudeDesktopDesc:
      "Automatically import all MCP servers from Claude Desktop. Installs to user scope (available in all projects).",
    importing: "Importing...",
    importFromJson: "Import from JSON",
    importFromJsonDesc: "Import server configurations from JSON files",
    chooseJsonFile: "Choose JSON File",
    exportConfiguration: "Export Configuration",
    exportConfigurationDesc: "Export your MCP server configuration",
    exportComingSoon: "Export (Coming Soon)",
    useClaudeCodeAsMcp: "Use Claude Code as MCP Server",
    useClaudeCodeAsMcpDesc:
      "Start Claude Code as an MCP server that other applications can connect to",
    startMcpServer: "Start MCP Server",
    jsonFormatExamples: "JSON Format Examples",
    singleServer: "Single server:",
    multipleServers: "Multiple servers (.mcp.json format):",
    invalidJsonFile: "Invalid JSON file. Please check the format.",
    enterServerName: "Enter a name for this server:",
    unrecognizedJsonFormat: "Unrecognized JSON format. Expected MCP server configuration.",
    failedToImportJson: "Failed to import JSON file",
    exportFunctionalityComingSoon: "Export functionality coming soon!",
    claudeCodeMcpServerStarted:
      "Claude Code MCP server started. You can now connect to it from other applications.",
    failedToStartMcpServer: "Failed to start Claude Code as MCP server",
    successfullyImported: "Successfully imported: {servers}",
    failedToImportSomeServers: "Failed to import some servers:\n{details}",
    failedToImportFromClaudeDesktop: "Failed to import from Claude Desktop",
    // MCPManager相关
    failedToLoadServers: "Failed to load MCP servers. Please ensure Claude Code is installed.",
    serverAddedSuccessfully: "MCP server added successfully!",
    serverRemovedSuccessfully: 'Server "{name}" removed successfully!',
    importedServersSuccess: "Successfully imported {count} servers!",
    importedServersPartial: "Imported {imported} servers, {failed} failed",
    mcpManagerTitle: "MCP Servers",
    mcpManagerSubtitle: "Manage Model Context Protocol servers",
    serverDisabledCannotTest: "Server is disabled, cannot test connection",
    toggleServerStatus: "Toggle server status",
    enableServer: "Enable server",
    disableServer: "Disable server",
  },

  usage: {
    title: "Usage Dashboard",
    subtitle: "Monitor your Claude Code usage and costs",
    totalTokens: "Total Tokens",
    totalCost: "Total Cost",
    sessionsCount: "Sessions",
    averageCost: "Average Cost",
    dailyUsage: "Daily Usage",
    weeklyUsage: "Weekly Usage",
    monthlyUsage: "Monthly Usage",
    yearlyUsage: "Yearly Usage",
    topProjects: "Top Projects",
    recentActivity: "Recent Activity",
    costBreakdown: "Cost Breakdown",
    tokenBreakdown: "Token Breakdown",
    noData: "No usage data available",
    refreshData: "Refresh Data",
    // 新增使用情况仪表板翻译键
    loadingStats: "Loading usage statistics...",
    tryAgain: "Try Again",
    allTime: "All Time",
    last7Days: "Last 7 Days",
    last30Days: "Last 30 Days",
    overview: "Overview",
    byModel: "By Model",
    byProject: "By Project",
    bySessions: "By Sessions",
    timeline: "Timeline",
    inputTokens: "Input Tokens",
    outputTokens: "Output Tokens",
    cacheWrite: "Cache Write",
    cacheRead: "Cache Read",
    mostUsedModels: "Most Used Models",
    usageByModel: "Usage by Model",
    usageByProject: "Usage by Project",
    usageBySession: "Usage by Session",
    dailyUsageOverTime: "Daily Usage Over Time",
    noUsageData: "No usage data available",
    sessions: "sessions",
    tokens: "tokens",
    input: "Input",
    output: "Output",
    avgCostPerSession: "Avg Cost per Session",
    modelsUsed: "Models Used",
    // 新增缺失的翻译键
    trackUsageAndCosts: "Track your Claude Code usage and costs",
    totalSessions: "Total Sessions",
    tokenBreakdownTitle: "Token Breakdown",
    failedToLoadUsageStats: "Failed to load usage statistics. Please try again.",
    noUsageDataForPeriod: "No usage data available for the selected period",
    cacheWriteShort: "Cache W",
    cacheReadShort: "Cache R",
    model: "model",
    models: "models",
  },

  agents: {
    title: "CC Agents",
    subtitle: "Manage your Claude Code agents",
    agentManagement: "Agent Management",
    createNewAgentsOrManage: "Create new agents or manage running agent executions",
    availableAgents: "Available Agents",
    runningAgents: "Running Agents",
    noAgentsAvailable: "No agents available",
    createFirstAgentToGetStarted: "Create your first agent to get started",
    createAgent: "Create Agent",
    agentName: "Agent Name",
    agentDescription: "Description",
    agentPrompt: "Prompt",
    agentIcon: "Icon",
    agentSettings: "Settings",
    runAgent: "Run Agent",
    editAgent: "Edit Agent",
    deleteAgent: "Delete Agent",
    duplicateAgent: "Duplicate Agent",
    shareAgent: "Share Agent",
    importAgent: "Import Agent",
    exportAgent: "Export Agent",
    noAgents: "No agents found",
    agentExecution: "Agent Execution",
    executionHistory: "Execution History",
    executionStatus: "Status",
    executionOutput: "Output",
    executionError: "Error",
    executionSuccess: "Success",
    executionCancelled: "Cancelled",
    executionRunning: "Running",
    executionPending: "Pending",
    // Create Agent interface translations
    editCCAgent: "Edit CC Agent",
    createCCAgent: "Create CC Agent",
    updateAgent: "Update your Claude Code agent",
    createNewAgent: "Create a new Claude Code agent",
    basicInformation: "Basic Information",
    model: "Model",
    claude4Sonnet: "Claude 4 Sonnet",
    claude4Opus: "Claude 4 Opus",
    claude35Haiku: "Claude 3.5 Haiku",
    claude35Sonnet: "Claude 3.5 Sonnet",
    claude37Sonnet: "Claude 3.7 Sonnet",
    claude37SonnetThinkingDesc: "Enhanced reasoning with thinking capabilities",
    claude4SonnetThinkingDesc: "Claude 4 Sonnet with enhanced reasoning capabilities",
    claude4OpusThinkingDesc: "Claude 4 Opus with enhanced reasoning capabilities",
    fasterEfficient: "Faster, efficient for most tasks",
    moreCapable: "More capable, better for complex tasks",
    fastAffordable: "Fast and affordable, great for simple tasks",
    balancedPerformance: "Balanced performance for everyday use",
    advancedReasoning: "Advanced reasoning for complex analysis",
    // Pricing related translations
    pricing: "Pricing",
    pricingInfo: "Pricing Information",
    inputTokens: "Input Tokens",
    outputTokens: "Output Tokens",
    cacheWrite: "Cache Write",
    cacheRead: "Cache Read",
    perMillionTokens: "per million tokens",
    costEfficiency: "Cost Efficiency",
    highEfficiency: "High Efficiency",
    mediumEfficiency: "Medium Efficiency",
    lowEfficiency: "High Performance",
    recommendedUseCases: "Recommended Use Cases",
    costEstimate: "Cost Estimate",
    pricingDetails: "Pricing Details",
    basedOnOfficialPricing: "Based on Anthropic official pricing",
    defaultTask: "Default Task (Optional)",
    defaultTaskPlaceholder: "e.g., Review this code for security issues",
    defaultTaskDesc: "This will be used as the default task placeholder when executing the agent",
    systemPrompt: "System Prompt",
    systemPromptDesc: "Define the behavior and capabilities of your CC Agent",
    agentNamePlaceholder: "e.g., Code Assistant",
    unsavedChanges: "You have unsaved changes. Are you sure you want to leave?",
    agentNameRequired: "Agent name is required",
    systemPromptRequired: "System prompt is required",
    failedToCreateAgent: "Failed to create agent",
    failedToUpdateAgent: "Failed to update agent",
    saving: "Saving...",
    // 新增 CC 智能体界面翻译键
    noAgentsYet: "No agents yet",
    createFirstAgent: "Create your first agent",
    execute: "Execute",
    edit: "Edit",
    export: "Export",
    created: "Created",
    recentExecutions: "Recent Executions",
    importFromFile: "Import from File",
    importFromGitHub: "Import from GitHub",
    agentExportedSuccessfully: "Agent exported successfully",
    agentImportedSuccessfully: "Agent imported successfully",
    agentImportedFromGitHub: "Agent imported from GitHub successfully",
    deleteAgentTitle: "Delete Agent",
    deleteAgentConfirm: "Are you sure you want to delete this agent?",
    deleteAgentDesc: "This action cannot be undone. The agent will be permanently deleted.",
    deletingAgent: "Deleting agent...",
    deleteAgentButton: "Delete Agent",
    cancel: "Cancel",
    // 额外的 CC 智能体翻译键
    manageAgents: "Manage your Claude Code agents",
    createCCAgentButton: "Create CC Agent",
    agentDeletedSuccessfully: "Agent deleted successfully",
    failedToDeleteAgent: "Failed to delete agent",
    failedToLoadAgents: "Failed to load agents",
    failedToExportAgent: "Failed to export agent",
    failedToImportAgent: "Failed to import agent",
    agentCreatedSuccessfully: "Agent created successfully",
    agentUpdatedSuccessfully: "Agent updated successfully",
    executeAgent: "Execute agent",
    exportAgentToFile: "Export agent to .claudia.json",
    fromFile: "From File",
    fromGitHub: "From GitHub",
    createFirstAgentDesc: "Create your first CC Agent to get started",
    ccAgentsTitle: "CC Agents",
    page: "Page",
    of: "of",
    deleteAgentConfirmation:
      'Are you sure you want to delete the agent "{name}"? This action cannot be undone and will permanently remove the agent and all its associated data.',
    deleting: "Deleting...",
    // Native agents related translations
    allAgents: "All Agents",
    claudia: "Claudia",
    native: "Native",
    running: "Running",
    createClaudiaAgent: "Create Claudia Agent",
    noClaudiaAgents: "No Claudia agents",
    createFirstClaudiaAgent: "Create your first Claudia agent",
    noNativeAgentsFound: "No native agents found",
    nativeAgentsDesc: "Place .md agent files in ~/.claude/agents/ to see them here",
    nativeAgentsInfo: "These are Claude Code native agents imported from your ~/.claude/agents folder.",
    cleanDatabase: "Clean Database",
    noRunningAgents: "No running agents",
    agentExecutionsWillAppear: "Agent executions will appear here when started",
    
    // AgentExecution interface translations
    task: "Task",
    selectOrEnterProjectPath: "Select or enter project path",
    configureHooks: "Configure hooks",
    hooks: "Hooks",
    enterTaskForAgent: "Enter the task for the agent",
    readyToExecute: "Ready to Execute",
    selectProjectPathAndTask: "Select a project path and enter a task to run the agent",
    initializingAgent: "Initializing agent...",
    output: "Output",
    copyOutput: "Copy Output",
    copyAsJsonl: "Copy as JSONL",
    copyAsMarkdown: "Copy as Markdown",
    configureHooksDesc: "Configure hooks that run before, during, and after tool executions. Changes are saved immediately.",
    projectSettings: "Project Settings",
    localSettings: "Local Settings",
    stop: "Stop",
    started: "Started",
    view: "View",
    importNativeAgents: "Import Native Agents",
  },

  // Thinking modes for Claude AI interaction
  thinkingModes: {
    auto: "Auto",
    autoDescription: "Let Claude decide",
    think: "Think",
    thinkDescription: "Basic reasoning",
    thinkHard: "Think Hard",
    thinkHardDescription: "Deeper analysis",
    thinkHarder: "Think Harder",
    thinkHarderDescription: "Extensive reasoning",
    ultrathink: "Ultrathink",
    ultrathinkDescription: "Maximum computation",
  },

  // Hooks Editor translations
  hooks: {
    title: "Hooks Configuration",
    subtitle: "Configure shell commands to execute at various points in Claude Code's lifecycle",
    scope: "Scope",
    projectScope: "Project Scope",
    localScope: "Local Scope",
    userScope: "User Scope",
    localScopeDesc: "These settings are not committed to version control",
    unsavedChanges: "You have unsaved changes. Click Save to persist them.",
    validationErrors: "Validation Errors:",
    securityWarnings: "Security Warnings:",
    templates: "Templates",
    preToolUse: "Pre Tool Use",
    postToolUse: "Post Tool Use",
    notification: "Notification",
    stop: "Stop",
    subagentStop: "Subagent Stop",
    preToolUseDesc: "Runs before tool calls, can block and provide feedback",
    postToolUseDesc: "Runs after successful tool completion",
    notificationDesc: "Customizes notifications when Claude needs attention",
    stopDesc: "Runs when Claude finishes responding",
    subagentStopDesc: "Runs when a Claude subagent (Task) finishes",
    pattern: "Pattern",
    patternPlaceholder: "e.g., Bash, Edit|Write, mcp__.*",
    patternTooltip: "Tool name pattern (regex supported). Leave empty to match all tools.",
    commonPatterns: "Common patterns",
    custom: "Custom",
    commands: "Commands",
    addCommand: "Add Command",
    noCommandsAdded: "No commands added yet",
    commandPlaceholder: "Enter shell command...",
    seconds: "seconds",
    noHooksConfigured: "No hooks configured for this event",
    addHook: "Add Hook",
    addMatcher: "Add Matcher",
    removeMatcher: "Remove Matcher",
    removeCommand: "Remove Command",
    loadingHooks: "Loading hooks configuration...",
    savingHooks: "Saving...",
    hooksConfiguration: "Hooks Configuration",
    chooseTemplate: "Choose a pre-configured hook template to get started quickly",
  },

  // Slash Commands Manager translations
  commands: {
    title: "Slash Commands",
    subtitle: "Create custom commands to streamline your workflow",
    projectCommands: "Project Slash Commands",
    projectCommandsDesc: "Create custom commands for this project",
    newCommand: "New Command",
    searchCommands: "Search commands...",
    allCommands: "All Commands",
    project: "Project",
    user: "User",
    noCommandsFound: "No commands found",
    noProjectCommands: "No project commands created yet",
    noCommandsCreated: "No commands created yet",
    createFirstProjectCommand: "Create your first project command",
    createFirstCommand: "Create your first command",
    editCommand: "Edit Command",
    createNewCommand: "Create New Command",
    commandName: "Command Name",
    commandNamePlaceholder: "e.g., review, fix-issue",
    namespace: "Namespace (Optional)",
    namespacePlaceholder: "e.g., frontend, backend",
    description: "Description (Optional)",
    descriptionPlaceholder: "Brief description of what this command does",
    commandContent: "Command Content",
    contentPlaceholder: "Enter the prompt content. Use $ARGUMENTS for dynamic values.",
    contentDesc:
      "Use $ARGUMENTS for user input, @filename for files, and !`command` for bash commands",
    allowedTools: "Allowed Tools",
    allowedToolsDesc: "Select which tools Claude can use with this command",
    examples: "Examples",
    preview: "Preview",
    arguments: "Arguments",
    deleteCommand: "Delete Command",
    deleteCommandConfirm: "Are you sure you want to delete this command?",
    deleteCommandDesc:
      "This action cannot be undone. The command file will be permanently deleted.",
    deleting: "Deleting...",
    scope: "Scope",
    userGlobal: "User (Global)",
    availableAcrossProjects: "Available across all projects",
    onlyAvailableInProject: "Only available in this project",
    userCommands: "User Commands",
    tools: "tools",
    bash: "Bash",
    files: "Files",
    showContent: "Show content",
    hideContent: "Hide content",
  },

  // NFO interface translations
  nfo: {
    title: "CLAUDIA.NFO",
    credits: "CREDITS",
    poweredBy: "POWERED BY",
    runtime: "RUNTIME",
    uiFramework: "UI FRAMEWORK",
    styling: "STYLING",
    animations: "ANIMATIONS",
    buildTool: "BUILD TOOL",
    packageManager: "PACKAGE MANAGER",
    specialThanks: "SPECIAL THANKS",
    openSourceCommunity: "To the open source community",
    betaTesters: "To all the beta testers",
    believers: "To everyone who believed in this project",
    sharing: "Remember: Sharing is caring!",
    support: "Support the developers!",
    fileABug: "File a bug",
    strategicProject: "A strategic project by Asterisk",
    dependencies: "DEPENDENCIES",
  },

  // Storage interface translations
  storage: {
    title: "Storage Management",
    subtitle: "Manage Claude Code data and cache",
    totalSize: "Total Size",
    projects: "Projects",
    sessions: "Sessions",
    cache: "Cache",
    logs: "Logs",
    settings: "Settings",
    cleanup: "Cleanup",
    cleanupDesc: "Delete old session data and cache files",
    cleanupOlderThan: "Cleanup older than",
    days: "days",
    cleanupNow: "Cleanup Now",
    cleanupSuccess: "Cleanup successful",
    cleanupError: "Cleanup failed",
    calculating: "Calculating...",
    noData: "No data",
    storageLocation: "Storage Location",
    openInFinder: "Open in File Manager",
    exportData: "Export Data",
    importData: "Import Data",
    backupData: "Backup Data",
    restoreData: "Restore Data",
    dataIntegrity: "Data Integrity",
    checkIntegrity: "Check Integrity",
    repairData: "Repair Data",
    integrityCheck: "Integrity Check",
    integrityOk: "Data integrity is good",
    integrityIssues: "Data integrity issues found",
    autoCleanup: "Auto Cleanup",
    autoCleanupDesc: "Automatically delete old data older than specified days",
    enableAutoCleanup: "Enable Auto Cleanup",
    cleanupInterval: "Cleanup Interval",

    // Database Storage specific translations
    databaseStorage: "Database Storage",
    sqlQuery: "SQL Query",
    resetDB: "Reset DB",
    selectTable: "Select a table",
    searchInTable: "Search in table...",
    newRow: "New Row",
    rows: "rows",
    actions: "Actions",
    editRow: "Edit Row",
    updateRowDesc: "Update the values for this row in the {table} table.",
    primaryKey: "Primary Key",
    type: "Type",
    notNull: "NOT NULL",
    default: "Default",
    cancel: "Cancel",
    update: "Update",
    newRowTitle: "New Row",
    addNewRowDesc: "Add a new row to the {table} table.",
    required: "Required",
    insert: "Insert",
    deleteRow: "Delete Row",
    deleteRowConfirm: "Are you sure you want to delete this row? This action cannot be undone.",
    delete: "Delete",
    resetDatabase: "Reset Database",
    resetDatabaseDesc:
      "This will delete all data and recreate the database with its default structure (empty tables for agents, agent_runs, and app_settings). The database will be restored to the same state as when you first installed the app. This action cannot be undone.",
    resetWarning: "All your agents, runs, and settings will be permanently deleted!",
    sqlQueryEditor: "SQL Query Editor",
    sqlQueryEditorDesc: "Execute raw SQL queries on the database. Use with caution.",
    sqlQueryPlaceholder: "SELECT * FROM agents LIMIT 10;",
    queryExecutedSuccess: "Query executed successfully. {count} rows affected.",
    lastInsertId: "Last insert ID: {id}",
    showingRows: "Showing {start} to {end} of {total} rows",
    page: "Page {current} of {total}",
    previous: "Previous",
    next: "Next",
    failedToLoadTables: "Failed to load tables",
    failedToLoadTableData: "Failed to load table data",
    failedToUpdateRow: "Failed to update row",
    failedToDeleteRow: "Failed to delete row",
    failedToInsertRow: "Failed to insert row",
    failedToExecuteSQL: "Failed to execute SQL",
    failedToResetDatabase: "Failed to reset database",
    databaseResetComplete:
      "Database Reset Complete: The database has been restored to its default state with empty tables (agents, agent_runs, app_settings).",
    resetFailed: "Reset Failed: Failed to reset the database. Please try again.",
    nullValue: "NULL",
    trueValue: "true",
    falseValue: "false",
  },

  // Proxy Settings
  proxy: {
    title: "Proxy Settings",
    subtitle: "Configure proxy settings for Claude API requests",
    enableProxy: "Enable Proxy",
    enableProxyDesc: "Use proxy for all Claude API requests",
    httpProxy: "HTTP Proxy",
    httpsProxy: "HTTPS Proxy",
    noProxy: "No Proxy",
    noProxyDesc: "Comma-separated list of hosts that should bypass the proxy",
    allProxy: "All Proxy (Optional)",
    allProxyDesc: "Proxy URL to use for all protocols if protocol-specific proxies are not set",
    httpProxyPlaceholder: "http://proxy.example.com:8080",
    httpsProxyPlaceholder: "http://proxy.example.com:8080",
    noProxyPlaceholder: "localhost,127.0.0.1,.example.com",
    allProxyPlaceholder: "socks5://proxy.example.com:1080",
    settingsSaved: "Proxy settings saved and applied successfully.",
    settingsFailed: "Failed to save proxy settings",
    loadFailed: "Failed to load proxy settings",
  },

  // Analytics Consent
  analytics: {
    title: "Analytics Settings",
    subtitle: "Configure analytics and data collection preferences",
    helpImproveClaudia: "Help Improve Claudia",
    collectAnonymousData: "We'd like to collect anonymous usage data to improve your experience.",
    whatWeCollect: "What we collect:",
    featureUsage: "Feature usage (which tools and commands you use)",
    performanceMetrics: "Performance metrics (app speed and reliability)",
    errorReports: "Error reports (to fix bugs and improve stability)",
    usagePatterns: "General usage patterns (session frequency and duration)",
    privacyProtected: "Your privacy is protected:",
    noPersonalInfo: "No personal information is collected",
    noFileContents: "No file contents, paths, or project names",
    noApiKeys: "No API keys or sensitive data",
    anonymousIds: "Completely anonymous with random IDs",
    optOutAnytime: "You can opt-out anytime in Settings",
    dataHelpsUs: "This data helps us understand which features are most valuable, identify performance issues, and prioritize improvements. Your choice won't affect any functionality.",
    noThanks: "No Thanks",
    allowAnalytics: "Allow Analytics",
    helpImprove: "Help improve Claudia",
    noPersonalData: "We collect anonymous usage data to improve your experience. No personal data is collected.",
    allow: "Allow",
    enableAnalytics: "Enable Analytics",
    analyticsSettings: "Analytics Settings",
    privacyInfo: "• No personal information is collected\n• No file contents, paths, or project names\n• No API keys or sensitive data\n• Completely anonymous with random IDs\n• You can disable analytics at any time",
    dataCollection: "Data Collection Information",
    deleteAllData: "Delete All Analytics Data",
    analyticsEnabled: "Analytics enabled",
    analyticsDisabled: "Analytics disabled",
    allDataDeleted: "All analytics data deleted",
  },
};
